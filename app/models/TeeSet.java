package models;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Transient;

import enums.TeeType;

/**
 * TeeSet generated by hbm2java
 */
@Entity
@NamedQueries(value = { 
		@NamedQuery(name = "findTeeSetByCourseAndTeeType", query = "select ts from TeeSet ts where ts.course.name = :courseName and ts.teeType = :teeType") }
)
public class TeeSet extends BaseEntity implements Comparable<TeeSet> {

	@ManyToOne
	@JoinColumn(name = "COURSE_ID", nullable = true)
	public Course course;
	
	@Enumerated(EnumType.STRING)
	public TeeType teeType;
	
	@Column
	public int par = 72;
	
	@Column
	public double courseRating;

	@Column
	public int slopeRating;

	@OneToMany(cascade = CascadeType.ALL, orphanRemoval=true,  fetch = FetchType.LAZY, mappedBy = "teeSet")
	public List<Score> scores = new ArrayList<Score>();
	
	public TeeSet() {
	}

	public TeeSet(TeeType teeType) {
		this.teeType = teeType;
	}
	public TeeSet(TeeType teeType,
			double courseRating, int slopeRating) {
		this.teeType = teeType;
		this.courseRating = courseRating;
		this.slopeRating = slopeRating;
	}

	public TeeSet(Course course, TeeType teeType,
			double courseRating, int slopeRating) {
		this(teeType,courseRating,slopeRating);
		this.course = course;
		course.addTeeSet(this);
	}

	public void addScore(Score score) {
		score.teeSet = this;
		scores.add(score);
	}
	
	@Transient
	public String getName() {
		return this.course.name+" "+this.teeType;
		
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = (int) (prime * result + (id));
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		TeeSet other = (TeeSet) obj;
		if (id != other.id)
			return false;
		return true;
	}

	public int compareTo(TeeSet teeSet) {
		return this.teeType.getOrder().compareTo(teeSet.teeType.getOrder());
	}

	@Override
	public String toString() {
		return "TeeSet [teeType=" + teeType + ", courseName="+course.name+"]";
	}

}
